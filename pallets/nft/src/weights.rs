
//! Autogenerated weights for `pallet_nft`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-12-08, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/solar-node
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_nft
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=./weights.rs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_nft`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_nft::WeightInfo for WeightInfo<T> {
	// Storage: Nft TotalOfAccount (r:1 w:1)
	// Storage: Nft Total (r:1 w:1)
	// Storage: Nft NextTokenId (r:1 w:1)
	// Storage: Nft TokensForAccount (r:0 w:1)
	// Storage: Nft TokenById (r:0 w:1)
	fn mint(i: u32, ) -> Weight {
		(43_831_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Nft TotalOfAccount (r:1 w:1)
	// Storage: Nft Total (r:1 w:1)
	// Storage: Nft NextTokenId (r:1 w:1)
	// Storage: Nft TokensForAccount (r:0 w:1)
	// Storage: Nft TokenById (r:0 w:1)
	fn large_mint() -> Weight {
		(1_640_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
}
